service: subscriptionless-example
provider:
  name: aws
  stage: dev
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource: '*'
        - Effect: Allow
          Action:
            - execute-api:*
          Resource: '*'
  environment:
    SUBSCRIPTIONS_TABLE: subscriptions
    CONNECTIONS_TABLE: connections
plugins:
  - serverless-plugin-typescript
  - serverless-step-functions

functions:
  subscription:
    handler: src/handler.wsHandler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default

  snsEvent:
    handler: src/handler.snsHandler
    events:
      - sns: NEW_ARTICLE

  # Ping/pong functions
  ping:
    handler: src/handler.pingHandler

# Step function for server->client ping/pong (recommended)
stepFunctions:
  stateMachines:
    ping:
      events:
        - websocket:
            route: $connect
      definition:
        Comment: 'An example of the Amazon States Language using wait states'
        StartAt: Delay
        States:
          # Send ping to client
          Eval:
            Type: Task
            Resource:
              Fn::GetAtt: [ping, Arn]
            Next: Choose
          # Wait max-duration to see if client pongs
          Timeout:
            Type: Wait
            Seconds: 10 # Ping timeout
            Next: End
            # Next: Eval
          # Delay before sending next ping (interval = pingTimeout.Seconds + pingDelay.seconds)
          Delay:
            Type: Wait
            Seconds: 10 # Todo - change to something reasonable
            Next: Eval
          Choose:
            Type: Choice
            Choices:
              - Variable: '$.choice'
                StringEquals: 'Timeout'
                Next: Timeout
              - Variable: '$.choice'
                StringEquals: 'Delay'
                Next: Delay
            Default: End
          End:
            Type: Pass
            End: true

  Resources:
    # Table for tracking connections
    connectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # Table for tracking subscriptions
    subscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SUBSCRIPTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: topic
            AttributeType: S
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: topic
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ConnectionIndex
            KeySchema:
              - AttributeName: connectionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: TopicIndex
            KeySchema:
              - AttributeName: topic
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
